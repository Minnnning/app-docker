name: CI-CD to Amazon ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
      # 1단계: 코드 체크아웃
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2단계: AWS OIDC 자격 증명
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::286387522454:role/kmj-app-GitHubActions-Role
          aws-region: ${{ env.AWS_REGION }}

      # 3단계: Parameter Store에서 모든 변수 가져오기
      - name: Get Parameters from AWS Parameter Store
        uses: dkershner6/aws-ssm-getparameters-action@v2
        with:
          parameterPairs: |
            /kmj-app/prod/ECS_SERVICE_NAME = ECS_SERVICE_NAME,
            /kmj-app/prod/ECS_CLUSTER_NAME = ECS_CLUSTER_NAME,
            /kmj-app/prod/ECR_REPO_NAME = ECR_REPO_NAME,
            /kmj-app/prod/ECS_CONTAINER_NAME = ECS_CONTAINER_NAME
          withDecryption: false

      # 4단계: ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 5단계: Docker 이미지 빌드 및 푸시
      - name: Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          
          echo "image=$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT


      # 6단계: Task Definition 템플릿에 새 이미지 주소 삽입
      - name: Render Amazon ECS Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # 1단계에서 생성한 task-definition.json 파일을 지정
          task-definition: task-definition.json
          
          # 템플릿의 "name" 필드와 일치하는 컨테이너를 찾음
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          
          # 5단계에서 빌드한 새 이미지 주소를 템플릿에 삽입
          image: ${{ steps.build-image.outputs.image }}

      # 7단계: Amazon ECS에 새 Task Definition 배포
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # 6단계에서 생성된 "최종 JSON 파일"을 배포에 사용
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          
          # 3단계에서 가져온 서비스 및 클러스터 이름
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          
          wait-for-service-stability: true
