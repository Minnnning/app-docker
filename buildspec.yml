version: 0.2

env:
  parameter-store:
    AWS_ACCOUNT_ID: "/kmj-app/prod/AWS_ACCOUNT_ID"
    AWS_REGION: "/kmj-app/prod/AWS_REGION"
    IMAGE_REPO_NAME: "/kmj-app/prod/ECR_REPO_NAME"
    CONTAINER_NAME: "/kmj-app/prod/ECS_CONTAINER_NAME"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      #AWS ECR에 로그인 하기 위한 임시 토큰 발급 리전 + 계정 id 필요
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      #내가 생성한 프라이빗 레포 주소 계정id + 레포 이름
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME
      #git 커밋해시의 앞 7자리를 환경 변수로 생성 이후 태그에 사용할 예정
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      #값이 존재하면 이미지 태그에 할당 | 비어잇다면 latest 기본값으로 설정된다
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      #빌드를 실행
      - docker build -t $REPOSITORY_URI:latest .
      #이미 생성된 빌드에 태그를 추가적으로 설정
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      
  #Ecr에 업로드
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      #Latest 태그가 붙은것을 ecr에 업로드한다
      - docker push $REPOSITORY_URI:latest
      #이미지태그를 추가적으로 같은 빌드파일에 넣어 올린다 ->태그만 추가
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    #이렇게 생선된 json은 자동배포를 위해서 상용된다 디플로이 단계에서 사용된다 컨테이너 이름을 보고 해당 컨테이너를 새롭게 올라온 레포로 변경해라 git commit hash기반
    - imagedefinitions.json

cache:
  paths:
    - '/root/.cache/pip/**/*'